import User from "../models/User.js";
import { v4 as uuidv4 } from "uuid";

const userModel = new User();

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @route GET /api/v1/users
 */
export const getAllUsers = async (req, res) => {
  try {
    console.log("üîç getAllUsers called with query:", req.query);
    const { role, email_verified, search, limit = 50, offset = 0 } = req.query;

    const filters = {
      role,
      email_verified:
        email_verified !== undefined ? email_verified === "true" : undefined,
      search,
      limit: parseInt(limit),
      offset: parseInt(offset),
    };

    console.log("üìä Getting users with filters:", filters);
    const users = await userModel.getAllUsers(filters);
    console.log("üìä Found users count:", users.length);

    res.json({
      success: true,
      data: users,
      pagination: {
        limit: filters.limit,
        offset: filters.offset,
        total: users.length,
      },
      message:
        users.length > 0
          ? `–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
          : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      errorType: "DATABASE_ERROR",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
 * @route GET /api/v1/users/:id
 */
export const getUserById = async (req, res) => {
  try {
    const { id } = req.params;

    const user = await userModel.getUserById(id);

    if (!user) {
      return res.status(404).json({
        success: false,
        error: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
        errorType: "NOT_FOUND",
        timestamp: new Date().toISOString(),
      });
    }

    res.json({
      success: true,
      data: user,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      errorType: "DATABASE_ERROR",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @route POST /api/v1/users
 */
export const createUser = async (req, res) => {
  try {
    const userData = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑ÔøΩÔøΩ—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!userData.username || !userData.email || !userData.password) {
      return res.status(400).json({
        success: false,
        error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: username, email, password",
        errorType: "VALIDATION_ERROR",
        details: ["username", "email", "password"],
        timestamp: new Date().toISOString(),
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(userData.email)) {
      return res.status(400).json({
        success: false,
        error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞",
        errorType: "VALIDATION_ERROR",
        timestamp: new Date().toISOString(),
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è username
    if (userData.username.length < 3 || userData.username.length > 50) {
      return res.status(400).json({
        success: false,
        error: "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤",
        errorType: "VALIDATION_ERROR",
        timestamp: new Date().toISOString(),
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (userData.password.length < 6) {
      return res.status(400).json({
        success: false,
        error: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
        errorType: "VALIDATION_ERROR",
        timestamp: new Date().toISOString(),
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º ID –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    const userDataWithId = {
      ...userData,
      id: userData.id || uuidv4(),
    };

    const newUser = await userModel.createUser(userDataWithId);

    res.status(201).json({
      success: true,
      data: newUser,
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${newUser.username}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    if (error.message.includes("—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")) {
      return res.status(409).json({
        success: false,
        error: error.message,
        errorType: "DUPLICATE_ERROR",
        timestamp: new Date().toISOString(),
      });
    }

    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      errorType: "DATABASE_ERROR",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @route PUT /api/v1/users/:id
 */
export const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (updateData.email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(updateData.email)) {
        return res.status(400).json({
          success: false,
          error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞",
          errorType: "VALIDATION_ERROR",
          timestamp: new Date().toISOString(),
        });
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è username –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (
      updateData.username &&
      (updateData.username.length < 3 || updateData.username.length > 50)
    ) {
      return res.status(400).json({
        success: false,
        error: "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤",
        errorType: "VALIDATION_ERROR",
        timestamp: new Date().toISOString(),
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (updateData.password && updateData.password.length < 6) {
      return res.status(400).json({
        success: false,
        error: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
        errorType: "VALIDATION_ERROR",
        timestamp: new Date().toISOString(),
      });
    }

    const updatedUser = await userModel.updateUser(id, updateData);

    res.json({
      success: true,
      data: updatedUser,
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${updatedUser.username}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω"
    if (error.message.includes("–Ω–µ –Ω–∞–π–¥–µ–Ω")) {
      return res.status(404).json({
        success: false,
        error: error.message,
        errorType: "NOT_FOUND",
        timestamp: new Date().toISOString(),
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    if (error.message.includes("—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")) {
      return res.status(409).json({
        success: false,
        error: error.message,
        errorType: "DUPLICATE_ERROR",
        timestamp: new Date().toISOString(),
      });
    }

    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      errorType: "DATABASE_ERROR",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};

/**
 * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @route DELETE /api/v1/users/:id
 */
export const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;

    const result = await userModel.deleteUser(id);

    res.json({
      success: true,
      data: result,
      message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω"
    if (error.message.includes("–Ω–µ –Ω–∞–π–¥–µ–Ω")) {
      return res.status(404).json({
        success: false,
        error: error.message,
        errorType: "NOT_FOUND",
        timestamp: new Date().toISOString(),
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∞
    if (error.message.includes("–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")) {
      return res.status(403).json({
        success: false,
        error: error.message,
        errorType: "OPERATION_FORBIDDEN",
        timestamp: new Date().toISOString(),
      });
    }

    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      errorType: "DATABASE_ERROR",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @route GET /api/v1/users/stats
 */
export const getUserStats = async (req, res) => {
  try {
    const stats = await userModel.getUserStats();

    res.json({
      success: true,
      data: stats,
      message: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω–∞",
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µÔøΩÔøΩ–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
      errorType: "DATABASE_ERROR",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @route GET /api/v1/users/search
 */
export const searchUsers = async (req, res) => {
  try {
    const { q: query, role, limit = 20 } = req.query;

    if (!query || query.length < 2) {
      return res.status(400).json({
        success: false,
        error: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞",
        errorType: "VALIDATION_ERROR",
        timestamp: new Date().toISOString(),
      });
    }

    const filters = {
      search: query,
      role,
      limit: parseInt(limit),
    };

    const users = await userModel.getAllUsers(filters);

    res.json({
      success: true,
      data: users,
      pagination: {
        limit: filters.limit,
        total: users.length,
      },
      message:
        users.length > 0
          ? `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
          : `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –øÔøΩÔøΩ–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      errorType: "DATABASE_ERROR",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å username
 * @route GET /api/v1/users/check-username/:username
 */
export const checkUsernameAvailability = async (req, res) => {
  try {
    const { username } = req.params;

    if (!username || username.length < 3) {
      return res.status(400).json({
        success: false,
        error: "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞",
        errorType: "VALIDATION_ERROR",
        timestamp: new Date().toISOString(),
      });
    }

    const existingUser = await userModel.getUserByUsername(username);
    const available = !existingUser;

    res.json({
      success: true,
      data: {
        username,
        available,
      },
      message: available ? "–õ–æ–≥–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω" : "–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç",
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞:", error);
    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µÔøΩÔøΩ–∫–µ –ª–æ–≥–∏–Ω–∞",
      errorType: "DATABASE_ERROR",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å email
 * @route GET /api/v1/users/check-email/:email
 */
export const checkEmailAvailability = async (req, res) => {
  try {
    const { email } = req.params;

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        success: false,
        error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞",
        errorType: "VALIDATION_ERROR",
        timestamp: new Date().toISOString(),
      });
    }

    const existingUser = await userModel.getUserByEmail(email);
    const available = !existingUser;

    res.json({
      success: true,
      data: {
        email,
        available,
      },
      message: available ? "Email –¥–æ—Å—Ç—É–ø–µ–Ω" : "Email —É–∂–µ –∑–∞–Ω—è—Ç",
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email:", error);
    res.status(500).json({
      success: false,
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email",
      errorType: "DATABASE_ERROR",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
};
