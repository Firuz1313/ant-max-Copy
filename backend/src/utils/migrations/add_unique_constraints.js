import { query } from "../database.js";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö UNIQUE –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
 */
export const up = async () => {
  console.log("üîÑ –î–æ–±–∞–≤–ª—è–µ–º UNIQUE –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è...");

  try {
    // 1. –î–æ–±–∞–≤–ª—è–µ–º UNIQUE –Ω–∞ devices.name –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    console.log(
      "1. –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π UNIQUE –∏–Ω–¥–µ–∫—Å –Ω–∞ devices.name (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö)...",
    );
    await query(`
      CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS idx_devices_name_unique_active 
      ON devices(name) 
      WHERE is_active = true;
    `);

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ºÔøΩÔøΩ–æ–∑–∏—Ç–Ω—ã–π UNIQUE –Ω–∞ problems (title, device_id) –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log(
      "2. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π UNIQUE –∏–Ω–¥–µ–∫—Å –Ω–∞ problems (title, device_id)...",
    );
    await query(`
      CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS idx_problems_title_device_unique_active 
      ON problems(title, device_id) 
      WHERE is_active = true;
    `);

    // 3. –î–æ–±–∞–≤–ª—è–µ–º UNIQUE –Ω–∞ remotes (name, device_id) –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log(
      "3. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π UNIQUE –∏–Ω–¥–µ–∫—Å –Ω–∞ remotes (name, device_id)...",
    );
    await query(`
      CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS idx_remotes_name_device_unique_active 
      ON remotes(name, device_id) 
      WHERE is_active = true;
    `);

    // 4. –î–æ–±–∞–≤–ª—è–µ–º UNIQUE –Ω–∞ diagnostic_steps (problem_id, step_number) - —É–∂–µ –µ—Å—Ç—å –≤ —Å—Ö–µ–º–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º
    console.log(
      "4. –ü—Ä–æ–≤–µ—Ä—è–µ–º UNIQUE –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ diagnostic_steps (problem_id, step_number)...",
    );
    const stepConstraintExists = await query(`
      SELECT 1 FROM information_schema.table_constraints 
      WHERE constraint_name = 'diagnostic_steps_problem_id_step_number_key'
      AND table_name = 'diagnostic_steps';
    `);

    if (stepConstraintExists.rows.length === 0) {
      await query(`
        ALTER TABLE diagnostic_steps 
        ADD CONSTRAINT diagnostic_steps_problem_id_step_number_key 
        UNIQUE (problem_id, step_number);
      `);
      console.log("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω UNIQUE constraint –Ω–∞ diagnostic_steps");
    } else {
      console.log(
        "   ‚ÑπÔ∏è  UNIQUE constraint –Ω–∞ diagnostic_steps —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
      );
    }

    // 5. –î–æ–±–∞–≤–ª—è–µ–º UNIQUE –Ω–∞ tv_interfaces.name –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log("5. –î–æ–±–∞–≤–ª—è–µ–º UNIQUE –∏–Ω–¥–µ–∫—Å –Ω–∞ tv_interfaces.name...");
    await query(`
      CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS idx_tv_interfaces_name_unique_active 
      ON tv_interfaces(name) 
      WHERE is_active = true;
    `);

    console.log("‚úÖ –í—Å–µ UNIQUE –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    return true;
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ UNIQUE –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:",
      error.message,
    );

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏, –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (error.code === "23505") {
      console.error(
        "üí° –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
      );

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ devices
      try {
        const deviceDupes = await query(`
          SELECT name, COUNT(*) as count 
          FROM devices 
          WHERE is_active = true 
          GROUP BY name 
          HAVING COUNT(*) > 1;
        `);
        if (deviceDupes.rows.length > 0) {
          console.error("üîç –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", deviceDupes.rows);
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ problems
      try {
        const problemDupes = await query(`
          SELECT title, device_id, COUNT(*) as count 
          FROM problems 
          WHERE is_active = true 
          GROUP BY title, device_id 
          HAVING COUNT(*) > 1;
        `);
        if (problemDupes.rows.length > 0) {
          console.error("üîç –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã:", problemDupes.rows);
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      }
    }

    throw error;
  }
};

/**
 * –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
 */
export const down = async () => {
  console.log("üîÑ –£–¥–∞–ª—è–µ–º UNIQUE –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è...");

  try {
    // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    await query(
      "DROP INDEX CONCURRENTLY IF EXISTS idx_tv_interfaces_name_unique_active;",
    );
    await query(
      "ALTER TABLE diagnostic_steps DROP CONSTRAINT IF EXISTS diagnostic_steps_problem_id_step_number_key;",
    );
    await query(
      "DROP INDEX CONCURRENTLY IF EXISTS idx_remotes_name_device_unique_active;",
    );
    await query(
      "DROP INDEX CONCURRENTLY IF EXISTS idx_problems_title_device_unique_active;",
    );
    await query(
      "DROP INDEX CONCURRENTLY IF EXISTS idx_devices_name_unique_active;",
    );

    console.log("‚úÖ –í—Å–µ UNIQUE –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ UNIQUE –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:", error.message);
    throw error;
  }
};

export default { up, down };
