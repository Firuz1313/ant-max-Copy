import BaseModel from "./BaseModel.js";
import { query } from "../utils/database.js";
import bcrypt from "bcryptjs";

class User extends BaseModel {
  constructor() {
    super("users");
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async getAllUsers(filters = {}) {
    console.log('üîç User.getAllUsers called with filters:', filters);

    let queryText = `
      SELECT
        id, username, email, first_name, last_name, role,
        email_verified, last_login, login_count, is_active,
        preferences, created_at, updated_at
      FROM users
      WHERE is_active = true
    `;
    const params = [];
    let paramIndex = 1;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª–∏
    if (filters.role) {
      queryText += ` AND role = $${paramIndex}`;
      params.push(filters.role);
      paramIndex++;
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É email
    if (filters.email_verified !== undefined) {
      queryText += ` AND email_verified = $${paramIndex}`;
      params.push(filters.email_verified);
      paramIndex++;
    }

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email
    if (filters.search) {
      queryText += ` AND (username ILIKE $${paramIndex} OR email ILIKE $${paramIndex} OR first_name ILIKE $${paramIndex} OR last_name ILIKE $${paramIndex})`;
      params.push(`%${filters.search}%`);
      paramIndex++;
    }

    queryText += " ORDER BY created_at DESC";

    if (filters.limit) {
      queryText += ` LIMIT $${paramIndex}`;
      params.push(filters.limit);
      paramIndex++;
    }

    if (filters.offset) {
      queryText += ` OFFSET $${paramIndex}`;
      params.push(filters.offset);
    }

    console.log('üìä User.getAllUsers query:', queryText);
    console.log('üìä User.getAllUsers params:', params);

    const result = await query(queryText, params);
    console.log('üìä User.getAllUsers result rows:', result.rows.length);

    return result.rows.map(this.formatUser);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  async getUserById(id) {
    const queryText = `
      SELECT 
        id, username, email, first_name, last_name, role, 
        email_verified, last_login, login_count, is_active,
        preferences, created_at, updated_at
      FROM users 
      WHERE id = $1 AND is_active = true
    `;

    const result = await query(queryText, [id]);

    if (result.rows.length === 0) {
      return null;
    }

    return this.formatUser(result.rows[0]);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
   */
  async getUserByUsername(username) {
    const queryText = `
      SELECT 
        id, username, email, first_name, last_name, role, 
        password_hash, email_verified, last_login, login_count, 
        is_active, preferences, created_at, updated_at
      FROM users 
      WHERE username = $1 AND is_active = true
    `;

    const result = await query(queryText, [username]);

    if (result.rows.length === 0) {
      return null;
    }

    return this.formatUser(result.rows[0]);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   */
  async getUserByEmail(email) {
    const queryText = `
      SELECT 
        id, username, email, first_name, last_name, role, 
        password_hash, email_verified, last_login, login_count, 
        is_active, preferences, created_at, updated_at
      FROM users 
      WHERE email = $1 AND is_active = true
    `;

    const result = await query(queryText, [email]);

    if (result.rows.length === 0) {
      return null;
    }

    return this.formatUser(result.rows[0]);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createUser(userData) {
    const {
      id,
      username,
      email,
      password,
      first_name,
      last_name,
      role = "user",
      permissions = [],
      email_verified = false,
      is_active = true,
      preferences = {},
      metadata = {},
    } = userData;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username –∏ email
    const existingUser = await this.getUserByUsername(username);
    if (existingUser) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º "${username}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    const existingEmail = await this.getUserByEmail(email);
    if (existingEmail) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email "${email}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const saltRounds = 12;
    const password_hash = await bcrypt.hash(password, saltRounds);

    const queryText = `
      INSERT INTO users (
        id, username, email, password_hash, first_name, last_name,
        role, permissions, email_verified, is_active, preferences, metadata
      ) VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
      ) RETURNING 
        id, username, email, first_name, last_name, role, 
        email_verified, last_login, login_count, is_active,
        preferences, created_at, updated_at
    `;

    const values = [
      id,
      username,
      email,
      password_hash,
      first_name,
      last_name,
      role,
      JSON.stringify(permissions),
      email_verified,
      is_active,
      JSON.stringify(preferences),
      JSON.stringify(metadata),
    ];

    const result = await query(queryText, values);
    return this.formatUser(result.rows[0]);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUser(id, updateData) {
    const currentUser = await this.getUserById(id);
    if (!currentUser) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const allowedFields = [
      "username",
      "email",
      "first_name",
      "last_name",
      "role",
      "permissions",
      "email_verified",
      "is_active",
      "preferences",
      "metadata",
    ];

    const updateFields = [];
    const values = [];
    let paramIndex = 1;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username
    if (updateData.username && updateData.username !== currentUser.username) {
      const existingUser = await this.getUserByUsername(updateData.username);
      if (existingUser) {
        throw new Error(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º "${updateData.username}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
        );
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email
    if (updateData.email && updateData.email !== currentUser.email) {
      const existingEmail = await this.getUserByEmail(updateData.email);
      if (existingEmail) {
        throw new Error(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email "${updateData.email}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
        );
      }
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (updateData.password) {
      const saltRounds = 12;
      const password_hash = await bcrypt.hash(updateData.password, saltRounds);
      updateFields.push(`password_hash = $${paramIndex}`);
      values.push(password_hash);
      paramIndex++;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    Object.keys(updateData).forEach((field) => {
      if (allowedFields.includes(field)) {
        let value = updateData[field];

        // JSON –ø–æ–ª—è
        if (["permissions", "preferences", "metadata"].includes(field)) {
          value = JSON.stringify(value);
        }

        updateFields.push(`${field} = $${paramIndex}`);
        values.push(value);
        paramIndex++;
      }
    });

    if (updateFields.length === 0) {
      return currentUser;
    }

    updateFields.push(`updated_at = NOW()`);
    values.push(id);

    const queryText = `
      UPDATE users 
      SET ${updateFields.join(", ")}
      WHERE id = $${paramIndex} 
      RETURNING 
        id, username, email, first_name, last_name, role, 
        email_verified, last_login, login_count, is_active,
        preferences, created_at, updated_at
    `;

    const result = await query(queryText, values);
    return this.formatUser(result.rows[0]);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
   */
  async deleteUser(id) {
    const user = await this.getUserById(id);
    if (!user) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∞
    if (user.role === "admin") {
      const adminCount = await this.countAdmins();
      if (adminCount <= 1) {
        throw new Error("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
      }
    }

    const queryText = `
      UPDATE users 
      SET is_active = false, updated_at = NOW()
      WHERE id = $1
    `;

    await query(queryText, [id]);
    return { id, deleted: true };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async verifyPassword(username, password) {
    const user = await this.getUserByUsername(username);
    if (!user || !user.password_hash) {
      return false;
    }

    return await bcrypt.compare(password, user.password_hash);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
   */
  async updateLastLogin(id) {
    const queryText = `
      UPDATE users 
      SET last_login = NOW(), login_count = login_count + 1, updated_at = NOW()
      WHERE id = $1
    `;

    await query(queryText, [id]);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
   */
  async countAdmins() {
    const queryText = `
      SELECT COUNT(*) as count 
      FROM users 
      WHERE role = 'admin' AND is_active = true
    `;

    const result = await query(queryText);
    return parseInt(result.rows[0].count);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async getUserStats() {
    const queryText = `
      SELECT 
        COUNT(*) as total_users,
        COUNT(CASE WHEN role = 'admin' THEN 1 END) as admin_count,
        COUNT(CASE WHEN role = 'moderator' THEN 1 END) as moderator_count,
        COUNT(CASE WHEN role = 'user' THEN 1 END) as user_count,
        COUNT(CASE WHEN email_verified = true THEN 1 END) as verified_count,
        COUNT(CASE WHEN last_login IS NOT NULL THEN 1 END) as active_count
      FROM users 
      WHERE is_active = true
    `;

    const result = await query(queryText);
    const stats = result.rows[0] || {};

    return {
      totalUsers: parseInt(stats.total_users || 0),
      adminCount: parseInt(stats.admin_count || 0),
      moderatorCount: parseInt(stats.moderator_count || 0),
      userCount: parseInt(stats.user_count || 0),
      verifiedCount: parseInt(stats.verified_count || 0),
      activeCount: parseInt(stats.active_count || 0),
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   */
  formatUser(user) {
    if (!user) return null;

    return {
      id: user.id,
      username: user.username,
      email: user.email,
      firstName: user.first_name,
      lastName: user.last_name,
      role: user.role,
      permissions: this.parseJSON(user.permissions, []),
      emailVerified: user.email_verified,
      lastLogin: user.last_login,
      loginCount: user.login_count || 0,
      isActive: user.is_active,
      preferences: this.parseJSON(user.preferences, {}),
      createdAt: user.created_at,
      updatedAt: user.updated_at,
      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º password_hash –≤ API –æ—Ç–≤ÔøΩÔøΩ—Ç–µ
    };
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ JSON
   */
  parseJSON(jsonString, defaultValue = null) {
    try {
      return jsonString ? JSON.parse(jsonString) : defaultValue;
    } catch (error) {
      return defaultValue;
    }
  }
}

export default User;
